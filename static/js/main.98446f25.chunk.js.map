{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","api/users.ts","api/posts.ts","api/comments.ts","index.tsx"],"names":["PostsList","_ref","posts","selectPost","setSelectPost","selectUser","length","_jsxs","children","_jsx","className","map","post","id","title","type","cn","onClick","handlerOpen","Loader","NewCommentForm","addComments","isLoading","_useState","useState","_useState2","_slicedToArray","authorName","setAuthorName","_useState3","_useState4","authorEmail","setAuthorEmail","_useState5","_useState6","authorText","setAuthorText","_useState7","_useState8","nameError","setNameError","_useState9","_useState10","emailError","setEmailError","_useState11","_useState12","textError","setTextError","errorIcon","htmlFor","name","placeholder","trim","value","onChange","e","target","event","preventDefault","hasError","newComment","postId","email","body","PostDetails","comments","error","deleteComment","isActive","setIsActive","concat","_ref2","href","UserSelector","users","setSelectUser","useEffect","closeMenu","window","addEventListener","removeEventListener","role","user","handleSelectUser","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","undefined","data","options","JSON","stringify","headers","then","fetch","response","json","client","App","setUsers","setPosts","setComments","setError","_useState13","_useState14","setIsLoading","catch","finally","commentId","filter","comment","Math","random","commentWithId","_objectSpread","addComment","prev","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98446f25.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\nimport { User } from '../types/User';\n\ntype Props = {\n  posts: Post[]\n  selectPost: Post | null\n  selectUser: User | null\n  setSelectPost: (selectPost: Post | null) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPost,\n  setSelectPost,\n  selectUser,\n}) => {\n  const handlerOpen = (post: Post) => {\n    setSelectPost(selectPost === post ? null : post);\n  };\n\n  return selectUser && posts.length ? (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link',\n                    { 'is-light': selectPost !== post })}\n                  onClick={() => handlerOpen(post)}\n                >\n                  {selectPost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  ) : null;\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  addComments:(addingComment: Omit<Comment, 'id'>) => void\n  selectPost: Post | null\n  isLoading: boolean\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addComments,\n  selectPost,\n  isLoading,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [authorText, setAuthorText] = useState('');\n  const [nameError, setNameError] = useState(false);\n  const [emailError, setEmailError] = useState(false);\n  const [textError, setTextError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    let hasError = false;\n\n    if (!authorName) {\n      hasError = true;\n      setNameError(true);\n    }\n\n    if (!authorEmail) {\n      hasError = true;\n      setEmailError(true);\n    }\n\n    if (!authorText) {\n      hasError = true;\n      setTextError(true);\n    }\n\n    if (hasError) {\n      return;\n    }\n\n    const newComment: Omit<Comment, 'id'> = {\n      postId: selectPost?.id || 0,\n      name: authorName,\n      email: authorEmail,\n      body: authorText,\n    };\n\n    addComments(newComment);\n    setAuthorName(newComment.name);\n    setAuthorEmail(newComment.email);\n    setAuthorText('');\n    setTextError(false);\n  };\n\n  const handlerClear = () => {\n    setAuthorName('');\n    setAuthorEmail('');\n    setAuthorText('');\n    setNameError(false);\n    setEmailError(false);\n    setTextError(false);\n  };\n\n  const errorIcon = (\n    <span\n      className=\"icon is-small is-right has-text-danger\"\n      data-cy=\"ErrorIcon\"\n    >\n      <i className=\"fas fa-exclamation-triangle\" />\n    </span>\n  );\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={cn('input',\n              { 'is-danger': nameError && !authorName.trim() })}\n            value={authorName}\n            onChange={(e) => setAuthorName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {nameError && !authorName.trim() && errorIcon}\n        </div>\n        {nameError && !authorName.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={cn('input',\n              { 'is-danger': emailError && !authorEmail.trim() })}\n            value={authorEmail}\n            onChange={(e) => setAuthorEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n          {emailError && !authorEmail.trim() && errorIcon}\n        </div>\n\n        {emailError && !authorEmail.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id={authorText}\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={cn('textarea',\n              { 'is-danger': textError && !authorText.trim() })}\n            value={authorText}\n            onChange={(e) => setAuthorText(e.target.value)}\n          />\n        </div>\n\n        {textError && !authorText.trim() && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={cn('button is-link', { 'is-loading': isLoading })}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handlerClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  comments: Comment[]\n  selectPost: Post | null\n  error: string\n  deleteComment: (id: number) => void\n  addComments:(Comment: Omit<Comment, 'id'>) => void\n  isLoading: boolean\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  selectPost,\n  error,\n  deleteComment,\n  addComments,\n  isLoading,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleWriteComment = () => {\n    setIsActive(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectPost?.id}: ${selectPost?.title} `}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && <Loader /> }\n          {error && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!comments.length ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <p className=\"title is-4\">Comments:</p>)}\n          {comments.map(({\n            id,\n            name,\n            email,\n            body,\n          }) => (\n            <article\n              key={id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${email}`} data-cy=\"CommentAuthor\">\n                  {name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => deleteComment(id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {body}\n              </div>\n            </article>\n          ))}\n          {!isActive && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isActive && (\n          <NewCommentForm\n            addComments={addComments}\n            selectPost={selectPost}\n            isLoading={isLoading}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useEffect,\n  useState,\n} from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  users: User[]\n  selectUser: User | null\n  setSelectUser: (selectUser: User | null) => void\n  setSelectPost: Dispatch<SetStateAction<Post | null>>\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectUser,\n  setSelectUser,\n  setSelectPost,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const hanlderMenuUsers = () => {\n    setIsActive(true);\n  };\n\n  useEffect(() => {\n    const closeMenu = () => {\n      setIsActive(false);\n    };\n\n    if (isActive) {\n      window.addEventListener('click', closeMenu);\n    } else {\n      window.removeEventListener('click', closeMenu);\n    }\n\n    return () => {\n      window.removeEventListener('click', closeMenu);\n    };\n  });\n\n  const handleSelectUser = (user : User) => {\n    setSelectUser(user);\n    setSelectPost(null);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={hanlderMenuUsers}\n        >\n          <span>\n            {selectUser ? (\n              selectUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {users.map(user => (\n          <div key={user.id} className=\"dropdown-content\">\n            <a\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item',\n                { 'is-active': selectUser === user })}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\n\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getAllUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\nimport { addComment, deleteCommentById, getCommentById } from './api/comments';\nimport { Comment } from './types/Comment';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectUser, setSelectUser] = useState<User | null>(null);\n  const [selectPost, setSelectPost] = useState<Post | null>(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getAllUsers()\n      .then(setUsers)\n      .catch(() => setError('Something went wrong!'))\n      .finally(() => setIsLoading(false));\n  }, [setUsers]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectUser) {\n      getPosts(selectUser.id)\n        .then(setPosts)\n        .catch(() => setError('Something went wrong!'))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectUser?.id]);\n\n  useEffect(() => {\n    if (selectPost !== null) {\n      getCommentById(selectPost.id)\n        .then(setComments)\n        .catch(() => setError('No posts yet'));\n    }\n  }, [selectPost?.id]);\n\n  const deleteComment = (commentId: number) => {\n    deleteCommentById(commentId)\n      .then(() => {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      })\n      .catch(() => setError('Can not delete comment'));\n  };\n\n  const addComments = (newComment: Omit<Comment, 'id'>) => {\n    setIsLoading(true);\n    const commentId = Math.random();\n\n    const commentWithId: Comment = {\n      id: commentId,\n      ...newComment,\n    };\n\n    addComment(commentWithId)\n      .then(() => {\n        setComments(prev => [...prev, commentWithId]);\n      })\n      .catch(() => setError('Can not add comment'))\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectUser={selectUser}\n                  setSelectUser={setSelectUser}\n                  setSelectPost={setSelectPost}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isLoading && (<Loader />)}\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n                {!posts.length && !isLoading && selectUser ? (\n                  <div\n                    className=\"notification is-warning\"\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                ) : (\n                  <PostsList\n                    posts={posts}\n                    selectPost={selectPost}\n                    setSelectPost={setSelectPost}\n                    selectUser={selectUser}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', { 'Sidebar--open': selectPost && posts.length > 0 },\n            )}\n          >\n            {selectPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  comments={comments}\n                  selectPost={selectPost}\n                  error={error}\n                  deleteComment={deleteComment}\n                  addComments={addComments}\n                  isLoading={isLoading}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getCommentById = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteCommentById = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}