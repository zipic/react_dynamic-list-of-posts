{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","utils/fetchClient.ts","App.tsx","api/users.ts","api/posts.ts","api/comments.ts","index.tsx"],"names":["PostsList","_ref","posts","selectPost","setSelectPost","_jsxs","children","_jsx","className","map","post","id","title","type","cn","onClick","handlerOpen","Loader","NewCommentForm","addComments","_useState","useState","_useState2","_slicedToArray","authorName","setAuthorName","_useState3","_useState4","authorEmail","setAuthorEmail","_useState5","_useState6","authorText","setAuthorText","_useState7","_useState8","isLoaded","setIsLoaded","_useState9","_useState10","isError","setIsError","htmlFor","name","placeholder","value","onChange","e","target","classNames","trim","newComment","postId","email","body","PostDetails","comments","error","deleteComment","isActive","setIsActive","concat","length","comment","href","UserSelector","users","selectUser","setSelectUser","useEffect","closeMenu","window","addEventListener","removeEventListener","role","user","handleSelectUser","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","arguments","undefined","data","options","JSON","stringify","headers","then","fetch","response","json","client","ERROR","App","setUsers","setPosts","setComments","_useState11","_useState12","setError","_useState13","_useState14","isLoading","setIsLoading","catch","finally","commentId","filter","Math","random","commentWithId","_objectSpread","addComment","prev","_toConsumableArray","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.af2f9acf.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  posts: Post[]\n  selectPost: Post | null\n  setSelectPost: (selectPost: Post | null) => void\n};\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  selectPost,\n  setSelectPost,\n}) => {\n  const handlerOpen = (post: Post) => {\n    setSelectPost(selectPost === post ? null : post);\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {posts.map(post => (\n            <tr key={post.id} data-cy=\"Post\">\n              <td data-cy=\"PostId\">{post.id}</td>\n\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={cn('button is-link',\n                    { 'is-light': selectPost !== post })}\n                  onClick={() => handlerOpen(post)}\n                >\n                  {selectPost === post ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  addComments:(addingComment: Omit<Comment, 'id'>) => void\n  selectPost: Post | null\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  addComments,\n  selectPost,\n}) => {\n  const [authorName, setAuthorName] = useState('');\n  const [authorEmail, setAuthorEmail] = useState('');\n  const [authorText, setAuthorText] = useState('');\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleSubmit = () => {\n    if (authorName.trim() || authorEmail.trim() || authorText.trim()) {\n      setIsError(true);\n    } else {\n      const newComment: Omit<Comment, 'id'> = {\n        postId: selectPost?.id || 0,\n        name: authorName,\n        email: authorEmail,\n        body: authorText,\n      };\n\n      addComments(newComment);\n      setIsLoaded(false);\n      setIsError(false);\n      setAuthorText('');\n    }\n  };\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className=\"input is-danger\"\n            value={authorName}\n            onChange={(e) => setAuthorName(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n        {isError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className=\"input is-danger\"\n            value={authorEmail}\n            onChange={(e) => setAuthorEmail(e.target.value)}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          <span\n            className=\"icon is-small is-right has-text-danger\"\n            data-cy=\"ErrorIcon\"\n          >\n            <i className=\"fas fa-exclamation-triangle\" />\n          </span>\n        </div>\n\n        {isError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className=\"textarea is-danger\"\n            value={authorText}\n            onChange={(e) => setAuthorText(e.target.value)}\n          />\n        </div>\n\n        {isError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link', { 'is-loaded': isLoaded })}\n            onClick={handleSubmit}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  comments: Comment[]\n  selectPost: Post | null\n  error: string\n  deleteComment: (id: number) => void\n  addComments:(Comment: Omit<Comment, 'id'>) => void\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  comments,\n  selectPost,\n  error,\n  deleteComment,\n  addComments,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  const handleWriteComment = () => {\n    setIsActive(true);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectPost?.id}: ${selectPost?.title} `}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {!error ? (\n            <Loader />\n\n          ) : (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n          {comments.length === 0 ? (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          ) : (\n            <p className=\"title is-4\">Comments:</p>)}\n          {comments.map(comment => (\n            <article\n              key={comment.id}\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n          {!isActive && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleWriteComment}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isActive && (\n          <NewCommentForm\n            addComments={addComments}\n            selectPost={selectPost}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[]\n  selectUser: User | null\n  setSelectUser: (selectUser: User | null) => void\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectUser,\n  setSelectUser,\n}) => {\n  const [isActive, setIsActive] = useState(false);\n  const hanlderMenuUsers = () => {\n    setIsActive(true);\n  };\n\n  useEffect(() => {\n    const closeMenu = () => {\n      setIsActive(false);\n    };\n\n    if (isActive) {\n      window.addEventListener('click', closeMenu);\n    } else {\n      window.removeEventListener('click', closeMenu);\n    }\n\n    return () => {\n      window.removeEventListener('click', closeMenu);\n    };\n  });\n\n  const handleSelectUser = (user : User) => {\n    setSelectUser(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={cn('dropdown', { 'is-active': isActive })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={hanlderMenuUsers}\n        >\n          <span>\n            {selectUser ? (\n              selectUser.name\n            ) : (\n              'Choose a user'\n            )}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        {users.map(user => (\n          <div key={user.id} className=\"dropdown-content\">\n            <a\n              href={`#user-${user.id}`}\n              className={cn('dropdown-item',\n                { 'is-active': selectUser === user })}\n              onClick={() => handleSelectUser(user)}\n            >\n              {user.name}\n            </a>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport cn from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\n\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { getAllUsers } from './api/users';\nimport { Post } from './types/Post';\nimport { getPosts } from './api/posts';\nimport { addComment, deleteCommentById, getCommentById } from './api/comments';\nimport { Comment } from './types/Comment';\n\nconst ERROR = 'Something went wrong!';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [selectUser, setSelectUser] = useState<User | null>(null);\n  const [selectPost, setSelectPost] = useState<Post | null>(null);\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getAllUsers()\n      .then(setUsers)\n      .catch(() => setError(ERROR))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectUser !== null) {\n      getPosts(selectUser.id)\n        .then(setPosts)\n        .catch(() => setError(ERROR))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectUser?.id]);\n\n  useEffect(() => {\n    if (selectPost !== null) {\n      getCommentById(selectPost.id)\n        .then(setComments)\n        .catch(() => setError(ERROR));\n    }\n  }, [selectPost?.id]);\n\n  const deleteComment = (commentId: number) => {\n    deleteCommentById(commentId)\n      .then(() => {\n        setComments(comments.filter(comment => comment.id !== commentId));\n      })\n      .catch(() => setError(ERROR));\n  };\n\n  const addComments = (newComment: Omit<Comment, 'id'>) => {\n    const commentId = Math.random();\n\n    const commentWithId: Comment = {\n      id: commentId,\n      ...newComment,\n    };\n\n    addComment(commentWithId)\n      .then(() => {\n        setComments(prev => [...prev, commentWithId]);\n      })\n      .catch(() => setError(ERROR));\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectUser={selectUser}\n                  setSelectUser={setSelectUser}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {!isLoading && (<Loader />)}\n\n                {error && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    {error}\n                  </div>\n                )}\n                {posts.length === 0 ? (\n                  <div\n                    className={cn('notification is-warning',\n                      { 'is-hidden': !selectUser })}\n                    data-cy=\"NoPostsYet\"\n                  >\n                    No posts yet\n                  </div>\n                ) : (\n                  <PostsList\n                    posts={posts}\n                    selectPost={selectPost}\n                    setSelectPost={setSelectPost}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={cn(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar', { 'Sidebar--open': selectPost && posts.length > 0 },\n            )}\n          >\n            {selectPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  comments={comments}\n                  selectPost={selectPost}\n                  error={error}\n                  deleteComment={deleteComment}\n                  addComments={addComments}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getAllUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (id: number) => {\n  return client.get<Post[]>(`/posts?userId=${id}`);\n};\n","import { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\nexport const getCommentById = (id: number) => {\n  return client.get<Comment[]>(`/comments?postId=${id}`);\n};\n\nexport const deleteCommentById = (id: number) => {\n  return client.delete(`/comments/${id}`);\n};\n\nexport const addComment = ({\n  postId,\n  name,\n  email,\n  body,\n}: Omit<Comment, 'id'>) => {\n  return client.post<Comment>('/comments', {\n    postId,\n    name,\n    email,\n    body,\n  });\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}